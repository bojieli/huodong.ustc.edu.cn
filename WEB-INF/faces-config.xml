<?xml version='1.0' encoding='UTF-8'?>

<!-- =========== FULL CONFIGURATION FILE ================================== -->

<faces-config version="2.0"
    xmlns="http://java.sun.com/xml/ns/javaee" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facesconfig_2_0.xsd">
<!--  start 整合JSF和Spring: 
方案1：配置变量解析器
      它首先会将查询请求委派到JSF的默认解析器，然后才调用Spring的WebApplicationContext.
      这样，JSF所管理的bean就可以使用以来注入使用Spring管理的bean
方案2：如JSF托管Bean在初始时，就需要利用Spring-bean从DB获取数据，
      需要随时显式获取Spring的bean实例。这时，方案1不可用。可用工具
      org.springframework.web.jsf.FacesContextUtils，根据当前的FacesContext
      获取一个Spring的ApplicationContext实例，再由它获取spring的Bean实例
      ApplicationContext appContext=FacesContextUtils.getWebApplicationContext(
                                      FacesContext.getCurrentInstance());
      CategoryService service = (CategoryService)appContext.getBean(serviceBeanName);
-->
    <variable-resolver>
                            org.springframework.web.jsf.DelegatingVariableResolver
    </variable-resolver>
<!-- end  整合JSF和Spring -->

<!-- JSF 后台托管Bean 配置 -->
    <managed-bean>
        <description>服务定位器托管Bean</description>
        <managed-bean-name>serviceLocatorBean</managed-bean-name>
        <managed-bean-class>com.ustc.controller.ServiceLocatorBean</managed-bean-class>
        <managed-bean-scope>application</managed-bean-scope>
    </managed-bean>
    
    <managed-bean>
        <description>用户组Bean</description> 
        <managed-bean-name>groupBean</managed-bean-name> 
        <managed-bean-class>com.ustc.controller.GroupBean</managed-bean-class> 
        <managed-bean-scope>session</managed-bean-scope>
        <managed-property>
            <property-name>serviceLocator</property-name>
            <value>#{serviceLocatorBean}</value>
        </managed-property>
    </managed-bean>
    <managed-bean>
        <description>用户Bean</description> 
        <managed-bean-name>userBean</managed-bean-name> 
        <managed-bean-class>com.ustc.controller.UserBean</managed-bean-class> 
        <managed-bean-scope>session</managed-bean-scope>
        <managed-property>
            <property-name>serviceLocator</property-name>
            <value>#{serviceLocatorBean}</value>
        </managed-property>
    </managed-bean>
    <managed-bean>
        <description>adminBean</description> 
        <managed-bean-name>adminBean</managed-bean-name> 
        <managed-bean-class>com.ustc.controller.AdminBean</managed-bean-class> 
        <managed-bean-scope>session</managed-bean-scope>
        <managed-property>
            <property-name>serviceLocator</property-name>
            <value>#{serviceLocatorBean}</value>
        </managed-property>
    </managed-bean>
    <navigation-rule>
        <from-view-id>/login.xhtml</from-view-id>
        <navigation-case>
            <from-outcome>success</from-outcome>
            <to-view-id>/userManage.xhtml</to-view-id>
        </navigation-case>
    </navigation-rule>
</faces-config>
